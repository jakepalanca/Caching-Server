name: Deploy to EC2

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout Code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up SSH
      - name: Set up SSH
        run: |
          echo "Setting up SSH and adding the EC2 host to known hosts"
          mkdir -p ~/.ssh
          echo "${{ secrets.INSTANCE_SSH }}" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
          echo "SSH setup complete"

      # Step 3: Deploy and Start Server using Maven
      - name: Deploy and Start Server using Maven
        run: |
          echo "Connecting to EC2 instance to deploy and run Maven commands"
          ssh -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_HOST }} << 'EOF'
          set -e
          echo "Navigating to project directory"
          cd /home/ec2-user/Caching-Server || { echo "Project directory not found"; exit 1; }

          echo "Pulling latest changes from GitHub"
          git pull origin master || { echo "Git pull failed"; exit 1; }

          echo "Installing Maven if not already installed"
          if ! command -v mvn &> /dev/null
          then
              echo "Maven not found, installing Maven"
              sudo yum update -y
              sudo yum install -y maven
              echo "Maven installed successfully"
          else
              echo "Maven is already installed"
          fi

          echo "Cleaning and building the project with Maven"
          mvn clean install -U -DskipTests=false || { echo "Maven build failed"; exit 1; }

          echo "Stopping any running server process on port 8080"
          if sudo lsof -i :8080 | grep java; then
              sudo kill -9 $(sudo lsof -t -i :8080) && echo "Stopped existing Java process on port 8080"
          else
              echo "No existing Java process found on port 8080"
          fi

          echo "Starting the server using Maven in the background"
          nohup mvn exec:java > server.log 2>&1 &

          echo "Waiting for the server to start on EC2"
          retries=30
          while [ $retries -gt 0 ]; do
              if curl -s http://localhost:8080/health; then
                  echo "Server is up and running"
                  exit 0
              else
                  echo "Waiting for the server to start... Attempts left: $retries"
                  sleep 5
                  retries=$((retries - 1))
              fi
          done

          echo "Server failed to start after multiple attempts"
          exit 1
          EOF

      # Step 4: Handle Failure
      - name: Handle Failure
        if: failure()
        run: |
          echo "Deployment failed, ensuring the previous server stays running"
          ssh -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_HOST }} << 'EOF'
          set -e
          echo "Navigating to project directory"
          cd /home/ec2-user/Caching-Server || { echo "Project directory not found"; exit 1; }

          echo "Restarting previous server using Maven if available"
          if [ -f pom.xml ]; then
              echo "Starting the server using Maven in the background"
              nohup mvn exec:java > server.log 2>&1 &
              echo "Server restarted successfully"
          else
              echo "pom.xml not found, cannot restart server"
          fi
          EOF

      # Step 5: Fetch Server Logs on Failure
      - name: Fetch Server Logs on Failure
        if: failure()
        run: |
          echo "Fetching server logs from EC2 instance"
          scp -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_HOST }}:/home/ec2-user/Caching-Server/server.log ./server.log
          echo "Server logs downloaded to runner"

      # Step 6: Cleanup
      - name: Cleanup
        if: always()
        run: |
          echo "Cleaning up SSH credentials and artifacts"
          rm -rf ~/.ssh
          echo "Cleanup complete"
