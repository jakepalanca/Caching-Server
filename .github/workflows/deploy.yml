name: Deploy to EC2 on Master Push

on:
  push:
    branches:
      - master  # Change to 'main' if your default branch is 'main'

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout the repository code
      - name: Checkout Repository
        uses: actions/checkout@v3

      # 2. Set up SSH key and known hosts
      - name: Set up SSH key and known hosts
        run: |
          echo "Setting up SSH keys..."
          mkdir -p ~/.ssh
          echo "${{ secrets.PEM_FILE }}" | tr -d '\r' > ~/.ssh/Github-Action-1.pem
          chmod 600 ~/.ssh/Github-Action-1.pem
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/Github-Action-1.pem
          ssh-keyscan -H ec2-50-17-144-60.compute-1.amazonaws.com >> ~/.ssh/known_hosts
          echo "SSH keys set up completed."

      # Optional: Test SSH Connection
      - name: Test SSH Connection
        run: |
          echo "Testing SSH connection..."
          ssh -o StrictHostKeyChecking=no ec2-user@ec2-50-17-144-60.compute-1.amazonaws.com "echo SSH Connection Successful"
          echo "SSH connection test completed."

      # 3. Deploy to EC2
      - name: Deploy to EC2
        run: |
          echo "Deploying to EC2..."
          ssh -o StrictHostKeyChecking=no ec2-user@ec2-50-17-144-60.compute-1.amazonaws.com "
            set -e

            echo 'Starting deployment...'

            # Export environment variables
            export DEMO_MODE='${{ secrets.DEMO_MODE }}'
            export COINGECKO_API_KEY='${{ secrets.COINGECKO_API_KEY }}'

            # Navigate to the application directory
            cd /home/ec2-user/Caching-Server || { echo 'Directory not found'; exit 1; }

            # Pull the latest code
            git fetch origin master
            LOCAL=\$(git rev-parse HEAD)
            REMOTE=\$(git rev-parse origin/master)

            if [ \"\$LOCAL\" = \"\$REMOTE\" ]; then
              echo 'Already up to date.'
            else
              git pull origin master
            fi

            # Build the project
            echo 'Building the project...'
            mvn clean install

            # Stop any existing application instance safely
            echo 'Stopping existing application...'
            pkill -f 'java -jar' || echo 'No existing application process found.'

            # Wait to ensure processes have been stopped
            sleep 5

            # Start the new application instance with environment variables
            echo 'Starting new application...'
            nohup java -Dfile.encoding=UTF-8 -jar target/*.jar > app.log 2>&1 &

            echo 'Deployment completed successfully.'
          "
          echo "Deployment to EC2 completed."
