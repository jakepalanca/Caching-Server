on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout the repository code
      - name: Checkout Repository
        uses: actions/checkout@v3

      # 2. Set up SSH key and known hosts
      - name: Set up SSH key and known hosts
        run: |
          echo "Setting up SSH keys..."
          export HOME=/home/runner
          mkdir -p $HOME/.ssh
          
          # Save the SSH key
          echo "${{ secrets.PEM_FILE }}" | tr -d '\r' > $HOME/.ssh/Github-Action-1.pem
          chmod 400 $HOME/.ssh/Github-Action-1.pem
          
          # Start the SSH agent and add the key
          eval "$(ssh-agent -s)"
          ssh-add $HOME/.ssh/Github-Action-1.pem || { echo "Failed to add SSH key"; exit 1; }
          
          # Add the EC2 host to known hosts
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> $HOME/.ssh/known_hosts || { echo "Failed to add EC2 host to known hosts"; exit 1; }
          chmod 644 $HOME/.ssh/known_hosts
          echo "SSH keys set up completed."

      # 3. Stop the existing Java application instance
      - name: Stop existing application instance on EC2
        run: |
          echo "Stopping existing application instance..."
          ssh -i $HOME/.ssh/Github-Action-1.pem -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_HOST }} "
            set -e
            PID_FILE=/home/ec2-user/Caching-Server/app.pid
            if [ -f \"$PID_FILE\" ]; then
              PID=\$(cat $PID_FILE)
              if ps -p \$PID > /dev/null; then
                echo 'Stopping Java process with PID: ' \$PID
                kill -15 \$PID
                sleep 5
                if ps -p \$PID > /dev/null; then
                  echo 'Force killing Java process...'
                  kill -9 \$PID
                fi
                echo 'Java process stopped successfully.'
              else
                echo 'Java process is not running.'
              fi
              rm -f $PID_FILE
            else
              echo 'No PID file found. Skipping stop command.'
            fi
          "

      # 4. Deploy updated code to EC2
      - name: Deploy latest code to EC2
        run: |
          echo "Deploying the latest code to EC2..."
          ssh -i $HOME/.ssh/Github-Action-1.pem -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_HOST }} "
            set -e
            cd /home/ec2-user/Caching-Server || { echo 'Directory not found'; exit 1; }

            echo 'Pulling latest code from Git...'
            git fetch origin master
            LOCAL=\$(git rev-parse HEAD)
            REMOTE=\$(git rev-parse origin/master)
            if [ \"\$LOCAL\" != \"\$REMOTE\" ]; then
              git pull origin master || { echo 'Git pull failed'; exit 1; }
            else
              echo 'Already up to date.'
            fi

            echo 'Building the project...'
            mvn clean install || { echo 'Build failed'; exit 1; }
          "

      # 5. Start the new application instance on EC2
      - name: Start new application instance on EC2
        run: |
          echo "Starting new application instance..."
          ssh -i $HOME/.ssh/Github-Action-1.pem -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_HOST }} "
            set -e
            cd /home/ec2-user/Caching-Server

            # Define environment variables
            COINGECKO_REQUEST_DELAY_MS=15000
            COINGECKO_NUMBER_OF_BATCHES=4
            FETCH_COIN_INTERVAL_SECONDS=60
            UPDATE_DYNAMODB_INTERVAL_SECONDS=30
            DYNAMODB_WRITE_CAPACITY_UNITS=50

            echo 'Starting application...'
            nohup java -Dfile.encoding=UTF-8 \
              -Ddemo.mode=\"${{ secrets.DEMO_MODE }}\" \
              -Dcoingecko.api.key=\"${{ secrets.COINGECKO_API_KEY }}\" \
              -Dcoingecko.request.delay.ms=\${COINGECKO_REQUEST_DELAY_MS} \
              -Dcoingecko.number.of.batches=\${COINGECKO_NUMBER_OF_BATCHES} \
              -Dfetch.coin.interval.seconds=\${FETCH_COIN_INTERVAL_SECONDS} \
              -Dupdate.dynamodb.interval.seconds=\${UPDATE_DYNAMODB_INTERVAL_SECONDS} \
              -Ddynamodb.write.capacity.units=\${DYNAMODB_WRITE_CAPACITY_UNITS} \
              -jar target/*.jar > app.log 2>&1 &

            echo \$! > app.pid
            echo 'New application instance started successfully.'
          "
