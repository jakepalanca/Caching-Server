name: Deploy to EC2

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout Code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up SSH
      - name: Set up SSH
        run: |
          echo "Setting up SSH and adding the EC2 host to known hosts"
          mkdir -p ~/.ssh
          echo "${{ secrets.INSTANCE_SSH }}" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
          echo "SSH setup complete"

      # Step 3: Run Maven Tests on EC2
      - name: Run Maven Tests on EC2
        run: |
          echo "Connecting to EC2 instance to run Maven tests"
          ssh -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_HOST }} << 'EOF'
          set -e
          echo "Navigating to project directory"
          cd /home/ec2-user/Caching-Server || { echo "Project directory not found"; exit 1; }

          echo "Pulling latest changes from GitHub"
          git pull origin master || { echo "Git pull failed"; exit 1; }

          echo "Cleaning and building the project with Maven"
          mvn clean install -U -DskipTests=false || { echo "Maven build failed"; exit 1; }

          echo "Running Maven tests"
          mvn test || { echo "Maven tests failed, exiting"; exit 1; }
          echo "Maven tests passed successfully"
          EOF

      # Step 4: Deploy and Start Server (if tests passed)
      - name: Deploy and Start Server (if tests passed)
        if: success()
        run: |
          echo "Starting deployment after successful tests"
          ssh -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_HOST }} << 'EOF'
          set -e
          echo "Navigating to project directory"
          cd /home/ec2-user/Caching-Server || { echo "Project directory not found"; exit 1; }

          echo "Stopping any running server process"
          pkill -f 'java -jar' && echo "Previous server process stopped" || echo "No running server process found"

          echo "Starting the server in the background"
          nohup java -jar target/jakepalanca.caching.server-1.0.1.jar > server.log 2>&1 &

          echo "Waiting for the server to start on EC2"
          retries=30
          while [ $retries -gt 0 ]; do
              if curl -s http://localhost:8080/health; then
                  echo "Server is up and running"
                  exit 0
              else
                  echo "Waiting for the server to start... Attempts left: $retries"
                  sleep 5
                  retries=$((retries - 1))
              fi
          done

          echo "Server failed to start after multiple attempts"
          exit 1
          EOF

      # Step 5: Handle Failure
      - name: Handle Failure
        if: failure()
        run: |
          echo "Deployment failed, ensuring the previous server stays running"
          ssh -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_HOST }} << 'EOF'
          set -e
          echo "Restarting previous server if available"
          if [ -f target/jakepalanca.caching.server-1.0.1.jar ]; then
              echo "Starting the previous server version"
              nohup java -jar target/jakepalanca.caching.server-1.0.1.jar > server.log 2>&1 &
              echo "Previous server version restarted"
          else
              echo "No previous version found to restart"
          fi
          EOF

      # Step 6: Fetch Server Logs on Failure
      - name: Fetch Server Logs on Failure
        if: failure()
        run: |
          echo "Fetching server logs from EC2 instance"
          scp -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_HOST }}:/home/ec2-user/Caching-Server/server.log ./server.log
          echo "Server logs downloaded to runner"

      # Step 7: Cleanup
      - name: Cleanup
        if: always()
        run: |
          echo "Cleaning up SSH credentials and artifacts"
          rm -rf ~/.ssh
